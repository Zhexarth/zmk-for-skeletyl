/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        left_shift {
            bindings = <&kp LSHFT>;
            key-positions = <3 4>;
            timeout-ms = <50>;
        };

        left-ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <13 14>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LALT>;
            key-positions = <23 24>;
            timeout-ms = <50>;
        };

        left-shift-ctrl {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <3 14>;
            timeout-ms = <50>;
        };

        left-shift-alt {
            bindings = <&kp LS(LALT)>;
            key-positions = <24 3>;
            timeout-ms = <50>;
        };

        Left-ctrl-alt {
            bindings = <&kp LC(LALT)>;
            key-positions = <24 13>;
            timeout-ms = <50>;
        };

        left-shift-ctrl-alt {
            bindings = <&kp LS(LC(LALT))>;
            key-positions = <3 14 24>;
        };

        right-shift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <5 6>;
            timeout-ms = <50>;
        };

        right-ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <15 16>;
        };

        right-alt {
            bindings = <&kp RALT>;
            key-positions = <25 26>;
            timeout-ms = <50>;
        };

        right-shift-ctrl {
            bindings = <&kp RS(RCTRL)>;
            key-positions = <6 15>;
            timeout-ms = <50>;
        };

        right-shift-alt {
            bindings = <&kp RS(RALT)>;
            key-positions = <6 25>;
            timeout-ms = <50>;
        };

        right-ctrl-alt {
            bindings = <&kp RC(RALT)>;
            key-positions = <16 25>;
            timeout-ms = <50>;
        };

        right-shift-ctrl-alt {
            bindings = <&kp RS(RC(RALT))>;
            key-positions = <6 15 25>;
        };

        esc {
            bindings = <&kt ESCAPE>;
            key-positions = <1 2>;
        };

        Caps {
            bindings = <&kt CAPSLOCK>;
            key-positions = <11 12>;
        };

        right-gui {
            bindings = <&kp RGUI>;
            key-positions = <27 28>;
        };

        left-gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <22 21>;
        };

        Left-En-punctuation {
            bindings = <&mo 1>;
            key-positions = <12 13>;
        };

        Right-En-punctuation {
            bindings = <&mo 1>;
            key-positions = <17 16>;
        };

        Right-Zh-punctuation {
            bindings = <&mo 2>;
            key-positions = <6 7>;
        };

        Left-Zh-punctuation {
            bindings = <&mo 2>;
            key-positions = <3 2>;
        };

        Right-Number {
            bindings = <&mo 3>;
            key-positions = <27 26>;
        };

        Left-Number {
            bindings = <&mo 3>;
            key-positions = <22 23>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <600>;
            global-quick-tap;
            quick-tap-ms = <400>;
        };
    };

    macros {
        Zh_comma: Zh_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(PERIOD) &kp COMMA &kp LC(PERIOD)>;
            label = "ZH_COMMA";
        };

        Zh_period: Zh_period {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(PERIOD) &kp PERIOD &kp LC(PERIOD)>;
            label = "ZH_PERIOD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Letters {
            bindings = <
&mt LS(Q) Q            &mt LS(W) W                 &mt LS(E) E                   &mt LS(R) R  &mt LS(T) T          &mt LS(Y) Y             &mt LS(U) U  &mt LS(I) I      &mt LS(O) O        &mt LS(P) P
&mt LS(A) A            &mt LS(S) S                 &mt LS(D) D                   &mt LS(F) F  &mt LS(G) G          &mt LS(H) H             &mt LS(J) J  &mt LS(K) K      &mt LS(L) L        &kp UP
&mt LS(Z) Z            &mt LS(X) X                 &mt LS(C) C                   &mt LS(V) V  &mt LS(B) B          &mt LS(N) N             &mt LS(M) M  &mt COMMA COMMA  &mt PERIOD PERIOD  &kp DOWN
             &kp LEFT               &kp BACKSPACE               &mt LS(TAB) TAB               &mt LS(ENTER) ENTER  &kp SPACE    &kp RIGHT
            >;
        };

        En-p {
            bindings = <
&kp PIPE               &kp CARET             &kp TILDE               &kp AMPERSAND  &mt GRAVE SQT               &mt RIGHT_BRACKET LEFT_BRACKET                   &kp DOLLAR            &none         &none            &kp DELETE
&kp SLASH              &kp ASTERISK          &kp MINUS               &kp PLUS       &kp DOUBLE_QUOTES           &mt RIGHT_PARENTHESIS LEFT_PARENTHESIS           &kp AT_SIGN           &kp QUESTION  &kp EXCLAMATION  &kp PAGE_UP
&kp PERCENT            &kp HASH              &kp UNDERSCORE          &kp EQUAL      &mt RIGHT_BRACE LEFT_BRACE  &mt GREATER_THAN LESS_THAN                       &kp NON_US_BACKSLASH  &kp SEMI      &kp COLON        &kp PAGE_DOWN
             &kp HOME                &trans                  &trans                 &trans                      &trans                                  &kp END
            >;
        };

        layer_2 {
            bindings = <
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
        &trans          &trans          &trans          &trans  &trans  &trans
            >;
        };

        Numbers {
            bindings = <
&kp F1          &kp F2          &kp F3          &kp F4  &kp F5   &kp F6           &kp F7  &kp F8  &kp F9  &kp F10
&kp N1          &kp N2          &kp N3          &kp N4  &kp N5   &kp N6           &kp N7  &kp N8  &kp N9  &kp N0
&trans          &trans          &trans          &trans  &kp F11  &kp F12          &trans  &trans  &trans  &trans
        &trans          &trans          &trans          &trans   &trans   &trans
            >;
        };
    };
};
